fn extern println(content: string) {}
fn extern input() -> string {}
fn extern len(s: string) -> int {}
fn extern charAt(s: string, i: int) -> string {}
fn extern toString(i: int) -> string {}

fn brainfuck(code: string) {
    let tape: [int] = [0];
    let ptr: int = 0;
    let code_len: int = len(code);
    let code_ptr: int = 0;
    let loop_stack: [int] = [0];

    while (code_ptr <= code_len+1) {
        let command: string = charAt(code, code_ptr);
        if (command == ">") {
            ptr += 1;
        } else if (command == "<") {
            ptr -= 1;
        } else if (command == "+") {
            tape[ptr] += 1;
        } else if (command == "-") {
            tape[ptr] -= 1;
        } else if (command == ".") {
            println(toString(tape[ptr]));
        } else if (command == ",") {
            let input_char: string = input();
            if (len(input_char) > 0) {
            tape[ptr] = input_char.charCodeAt(0);
            }
        } else if (command == "[") {
            if (tape[ptr] == 0) {
            let open_brackets: int = 1;
            while (open_brackets > 0) {
                code_ptr += 1;
                if (charAt(code, code_ptr) == "[") {
                open_brackets += 1;
                } else if (charAt(code, code_ptr) == "]") {
                open_brackets -= 1;
                }
            }
            } else {
            loop_stack.push(code_ptr);
            }
        } else if (command == "]") {
            if (tape[ptr] != 0) {
            code_ptr = loop_stack[loop_stack.len() - 1];
            } else {
            loop_stack.pop();
            }
        }
        code_ptr += 1;
    }
}

fn main() -> int {
    println("Enter bf code: ");
    let x: string = input();

    brainfuck(x);

    return 0;
}